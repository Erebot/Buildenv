<?xml version="1.0"?>
<project name="Erebot_buildenv" description="Same as 'phing all'" default="all">
    <import file="vendor/erebot/buildenv/phing/tasks.xml"/>
    <property name="tagfiles"                   value=""/>
    <property name="phar.stub"                  value="vendor/erebot/buildenv/stub.php"/>
    <property name="skip.update_catalog"        value="true"/>
    <property name="subfile.phpcs"              value="vendor/erebot/buildenv/phing/phpcs.xml"/>
    <property name="subfile.pdepend"            value="vendor/erebot/buildenv/phing/pdepend.xml"/>
    <property name="subfile.phpmd"              value="vendor/erebot/buildenv/phing/phpmd.xml"/>
    <property name="subfile.phpcpd"             value="vendor/erebot/buildenv/phing/phpcpd.xml"/>
    <property name="subfile.coverage.pre"       value="vendor/erebot/buildenv/phing/pre_coverage.xml"/>
    <property name="subfile.phpunit"            value="vendor/erebot/buildenv/phing/phpunit.xml"/>
    <property name="subfile.coverage"           value="vendor/erebot/buildenv/phing/coverage.xml"/>
    <property name="qa.coverage.db"             value="build/${phing.project.name}.db"/>
    <property name="qa.coverage.tmp"            value="build/${phing.project.name}.xml"/>
    <property name="qa.coverage.min.project"    value="0"/>
    <property name="qa.coverage.min.class"      value="0"/>
    <property name="qa.coverage.min.method"     value="0"/>

    <tstamp>
        <!-- Format is, e.g. "Sat, 03 Oct 2009, 16:31" -->
        <format property="buildtime" pattern="%a, %d %b %Y, %H:%M"/>
    </tstamp>

    <!-- Automatically detect existing locales. -->
    <exec command="php vendor/erebot/buildenv/get_locales.php" checkreturn="true" outputProperty="locales"/>
    <!-- Automatically detect the current version. -->
    <exec command="php vendor/erebot/buildenv/get_version.php" checkreturn="true" outputProperty="version"/>

    <!-- Include Composer autoloader. -->
    <php expression="require_once('vendor/autoload.php');" level="debug"/>

    <target name="all" depends="i18n"
        description="Main target -- Same as 'phing i18n'"/>

    <target name="locales" description="Displays available locales">
        <echo message="Available locales: '${locales}'"/>
    </target>

    <!-- Internationalization -->
    <target name="i18n"
        depends="extract_messages,update_catalog,compile_catalog"
        description="Runs several commands to update the translation files"/>

    <target name="extract_messages"
        description="Extract messages in need of a translation from current code">
        <php function="putenv">
            <param value="LANG=C"/>
        </php>
        <xgettext command="xgettext -o data/i18n/${phing.project.name}.pot --from-code utf-8 --foreign-user --add-location -E -w 80 -s -L PHP --strict --force-po --package-name ${phing.project.name} --package-version ${version} --msgid-bugs-address i18n@erebot.net --add-comments=I18N:">
            <fileset refid="sources"/>
        </xgettext>
        <if>
            <isset property="env.LANG"/>
            <then>
                <php function="putenv">
                    <param value="LANG=${env.LANG}"/>
                </php>
            </then>
        </if>
    </target>

    <target name="update_catalog"
        description="Update the translation files based on current code">
        <if>
            <isfalse value="${skip.update_catalog}"/>
            <then>
                <foreach list="${locales}" param="locale" target="update_1_catalog"/>
                <phing phingFile="build.xml" target="identity_catalog" haltonfailure="true"/>
            </then>
        </if>
    </target>

    <target name="update_1_catalog" hidden="true">
        <exec command="msgmerge --lang=${locale} --backup=off -U -N -e --strict -w 80 -q --add-location data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po data/i18n/${phing.project.name}.pot" logoutput="true" dir="."/>
    </target>

    <target name="identity_catalog"
        description="Automatically translate the catalog for the default locale">
        <property name="locale" value="en_US"/>
        <exec command="msgen --lang=${locale} -e --strict -w 80 --add-location -o data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po" logoutput="true" dir="."/>
    </target>

    <target name="init_catalog"
        description="Add a new language to translation files">
        <propertyprompt propertyName="locale" promptText="Name of the locale" useExistingValue="true"/>
        <mkdir dir="data/i18n/${locale}/LC_MESSAGES"/>
        <exec command="msginit --no-translator -w 80 -l ${locale} -i data/i18n/${phing.project.name}.pot -o data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po" logoutput="true" dir="."/>
    </target>

    <target name="compile_catalog"
        description="Compile the translation files">
        <php function="putenv">
            <param value="LANG=C"/>
        </php>
        <foreach list="${locales}" param="locale" target="compile_1_catalog"/>
        <if>
            <isset property="env.LANG"/>
            <then>
                <php function="putenv">
                    <param value="LANG=${env.LANG}"/>
                </php>
            </then>
        </if>
    </target>

    <target name="compile_1_catalog" hidden="true">
        <exec command="msgfmt --statistics -c -f -o data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.mo data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po" dir="." outputProperty="stats"/>
        <i18nStats output="${stats}" file="data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po"/>
    </target>

    <!-- Release process -->
    <target name="release" depends="all"
        description="Build a PHAR package from the current code">
        <if>
            <and>
                <isset property="opensslkey"/>
                <isset property="opensslpassfile"/>
                <available extension="openssl"/>
            </and>
            <then>
                <property override="true" name="signature" value="openssl"/>
                <loadfile file="${opensslpassfile}" property="keypassword">
                    <filterchain><striplinebreaks/></filterchain>
                </loadfile>
            </then>
            <else>
                <property override="true" name="signature" value="sha1"/>
            </else>
        </if>

        <!-- condition overrides previous property affectations. -->
        <condition property="compression" value="gzip">
            <available extension="zlib"/>
        </condition>
        <condition property="compression" value="bzip2">
            <available extension="bz2"/>
        </condition>
        <property name="compression" value="none"/>

        <mkdir dir="build"/>
        <pharpackage
            destfile="build/${phing.project.name}-${version}.phar"
            basedir="./"
            stub="${phar.stub}"
            alias="${phing.project.name}"
            signature="${signature}"
            key="${opensslkey}"
            keypassword="${keypassword}"
            compression="${compression}"
        >
            <fileset dir=".">
                <include name="composer.json"/>
                <include name="composer.lock"/>
                <include name="LICENSE"/>
                <include name="LICENSE.*"/>
                <include name="LICENCE"/>
                <include name="LICENCE.*"/>
                <include name="README"/>
                <include name="README.*"/>
                <include name="src/**"/>
            </fileset>
            <fileset refid="phar.files"/>
            <metadata>
                <element name="realname" value="${phing.project.name}"/>
                <element name="version" value="${version}"/>
            </metadata>
        </pharpackage>
        <chmod file="./${phing.project.name}-${version}.phar" mode="0755"/>
    </target>

    <!-- Documentation -->
    <target name="doc" depends="doc_html"
        description="Generate documentation"/>

    <target name="doc_html" description="Generate documentation in HTML format" depends="doc_api,doc_enduser"/>

    <target name="doc_api" description="Generate API documentation in HTML format">
        <!-- Get the brief description from the README. -->
        <if>
            <os family="windows"/>
            <then>
                <exec command="./buildenv/compat/win/head.bat README"
                    outputProperty="short_description"/>
            </then>
            <else>
                <exec command="head -1 README" outputProperty="short_description"/>
            </else>
        </if>
        <php function="escapeshellarg" returnProperty="short_description">
            <param value="${short_description}"/>
        </php>

        <!-- Determine path to tag files. -->
        <property name="tagfiles.reference" value="${phing.project.name}"/>
        <exec command="php vendor/erebot/buildenv/get_filetags.php ${tagfiles.reference} ${tagfiles}"
            checkreturn="true" outputProperty="tagfiles"/>
        <php function="escapeshellarg" returnProperty="tagfiles">
            <param value="${tagfiles}"/>
        </php>

        <exec command="COMPONENT_NAME=${phing.project.name} COMPONENT_VERSION=${version} COMPONENT_BRIEF=${short_description} COMPONENT_TAGFILES=${tagfiles} doxygen"
            dir="." passthru="true" checkreturn="true" logoutput="true"/>
    </target>

    <target name="doc_enduser" description="Generate end-user documentation in HTML format">
        <property name="doc_release" value=""/>
        <exec command="SPHINX_VERSION=${version} SPHINX_RELEASE=${version}${doc_release} SPHINX_PROJECT=${phing.project.name} sphinx-build -c vendor/erebot/buildenv/sphinx/ -b html -D html_use_opensearch=http://erebot.github.com/${phing.project.name} -d docs/enduser/doctrees docs/src docs/enduser/html"
            passthru="true" checkreturn="true" logoutput="true"/>
    </target>


    <!-- Unit tests and code coverage -->
    <target name="test" depends="prepare_test,bare_test"
        description="Run tests and generate code coverage reports (same as 'phing qa_coverage')" />
    <target name="tests" depends="prepare_test,bare_test"
        description="Same as 'phing test'"/>
    <target name="coverage" depends="prepare_test,bare_test"
        description="Same as 'phing test'"/>
    <target name="prepare_test" depends="all"
        description="Tasks to do before running the test suite"/>
    <target name="bare_test" depends="qa_coverage"
        description="Run the tests without any preparations"/>


    <!-- Quality Assurance -->
    <target name="qa"
        depends="qa_lint,qa_codesniffer,qa_depend,qa_mess,qa_duplicates,qa_test"
        description="Run Qualify-Assurance (QA) tools"/>

    <target name="qa_lint" description="Check QA using phplint">
        <phplint><fileset refid="sources"/></phplint>
    </target>

    <target name="qa_codesniffer" description="Check QA using PHP_CodeSniffer">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpcs" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "squizlabs/php_codesniffer" package (&gt;=1.2.2) must be installed
            for the "qa_codesniffer" target to be available.
        </fail>
        <import file="${subfile.phpcs}"/>
    </target>

    <target name="qa_depend"
        description="Check QA using PHP depend">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/pdepend" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "pdepend/pdepend" package must be installed
            for the "qa_depend" target to be available.
        </fail>
        <import file="${subfile.pdepend}"/>
    </target>

    <target name="qa_mess"
        description="Check QA using phpmd (PHP Mess Detector)">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpmd" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "phpmd/phpmd" package must be installed
            for the "qa_mess" target to be available.
        </fail>
        <import file="${subfile.phpmd}"/>
    </target>

    <target name="qa_duplicates"
        description="Check QA using phpcpd (PHP Copy/Paste Detector)">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpcpd" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "sebastian/phpcpd" package must be installed
            for the "qa_duplicates" target to be available.
        </fail>
        <import file="${subfile.phpcpd}"/>
    </target>

    <target name="qa_pre_coverage" hidden="true">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpunit" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "phpunit/phpunit" package must be installed
            for the "qa_pre_coverage" target to be available.
        </fail>
        <import file="${subfile.coverage.pre}"/>
    </target>

    <target name="qa_test" depends="qa_pre_coverage"
        description="Run (unit) tests using PHPUnit">
        <php expression="define('TESTENV_DIR', dirname('${phing.file}').DIRECTORY_SEPARATOR.'tests'.DIRECTORY_SEPARATOR.'testenv');"/>
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpunit" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "phpunit/phpunit" package must be installed
            for the "qa_test" target to be available.
        </fail>
        <import file="${subfile.phpunit}"/>
    </target>

    <target name="qa_coverage" depends="qa_test"
        description="Run code coverage analysis based on unit tests (see 'phing qa_test')">
        <php function="chdir"><param value="vendor/bin"/></php>
        <available followSymlinks="true" file="vendor/bin/phpunit" property="usable"/>
        <php function="chdir"><param value="../.."/></php>
        <fail unless="usable">
            The "phpunit/phpunit" package must be installed
            for the "qa_coverage" target to be available.
        </fail>
        <import file="${subfile.coverage}"/>
    </target>
</project>
