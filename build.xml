<?xml version="1.0"?>
<project name="Erebot_buildenv" description="Same as 'phing all'" default="all">
    <php expression="md5(PHP_VERSION.uniqid('', TRUE));" returnProperty="randomID"/>
    <php function="sys_get_temp_dir"    returnProperty="tmp.dir"/>
    <property name="qa.coverage.force"  value="true"/>
    <property name="qa.coverage.db"     value="${tmp.dir}/${phing.project.name}.${randomID}.db"/>
    <property name="qa.coverage.tmp"    value="${tmp.dir}/${phing.project.name}.${randomID}.xml"/>
    <property name="release.tmp"        value="${tmp.dir}/release-${phing.project.name}.${randomID}"/>
    <property name="file.tmp"           value="${tmp.dir}/${phing.project.name}.${randomID}"/>
    <property name="build-phar"         value="false"/>
    <property name="pear.channel"       value="pear.erebot.net"/>
    <property name="tagfiles"           value=""/>

    <if>
        <istrue value="${qa.coverage.force}"/>
        <then>
            <property name="qa.coverage.min.project" value="75"/>
            <property name="qa.coverage.min.class"   value="75"/>
            <property name="qa.coverage.min.method"  value="50"/>
        </then>
        <else>
            <property name="qa.coverage.min.project" value="0"/>
            <property name="qa.coverage.min.class"   value="0"/>
            <property name="qa.coverage.min.method"  value="0"/>
        </else>
    </if>

    <tstamp>
        <!-- Format is, e.g. Sat, 03 Oct 2009, 16:31 -->
        <format property="buildtime" pattern="%a, %d %b %Y, %H:%M"/>
    </tstamp>

    <adhoc-task name="xgettext"><![CDATA[
    class XgettextTask extends Task
    {
        protected $command = 'xgettext';
        protected $filesets = array();

        public function setCommand($command)    { $this->command = $command;    }
        public function getCommand()            { return $this->command;        }

        public function createFileset()
        {
            $num = array_push($this->filesets, new FileSet());
            return $this->filesets[$num-1];
        }

        public function main()
        {
            $filesToParse = array();
            foreach ($this->filesets as $fs) {
                $files = $fs->getDirectoryScanner($this->project)->getIncludedFiles();
                foreach($files as $filename) {
                     $f = new PhingFile($fs->getDir($this->project), $filename);
                     $filesToParse[] = $f->getPath();
                }
            }

            $command = $this->command . " " . join(" ", $filesToParse);
            $this->log("Executing command: " . $command);
            exec($command, $output, $return);

            if ($return != 0)
                throw new BuildException("Could not execute xgettext: " . implode(" ", $output));

            foreach ($output as $line) {
                $lowerLine = strtolower($line);

                if (strpos($lowerLine, 'warning') !== FALSE) {
                    $this->log($line, Project::MSG_WARN);
                    continue;
                }

                if (strpos($lowerLine, 'notice') !== FALSE) {
                    $this->log($line, Project::MSG_INFO);
                    continue;
                }

                $this->log($line, Project::MSG_VERBOSE);
            }
        }
    }
    ]]></adhoc-task>

    <adhoc-task name="i18nStats"><![CDATA[
    class UntranslatedTask extends Task
    {
        protected $output = '';
        protected $file = '';

        public function setOutput($output)  { $this->output = $output;  }
        public function getOutput()         { return $this->output;     }

        public function setFile($file)  { $this->file = $file;  }
        public function getFile()       { return $this->file;   }

        function main()
        {
            $output = explode("\n", str_replace("\r\n", "\n", $this->output));
            foreach ($output as $line) {
                if (strpos($line, "untranslated") !== FALSE)
                    $this->log($this->file . ":0: Warning: ".$line, Project::MSG_WARN);
                else if (strpos($line, "translated") !== FALSE)
                    $this->log($this->file . ":0: Information: ".$line, Project::MSG_INFO);
                else if (strpos($line, $this->file . ":") === 0) {
                    $fields = explode(":", $line);
                    $file = array_shift($fields);
                    $linr = array_shift($fields);
                    $msg  = trim(implode(":", $fields));
                    $this->log($file.":".$linr.": Warning: ".$msg, Project::MSG_ERR);
                }
                else
                    $this->log($line, Project::MSG_ERR);
            }
        }
    }
    ]]></adhoc-task>

    <!-- Automatically detect existing locales. -->
    <exec command="php ./buildenv/get_locales.php" checkreturn="true" outputProperty="locales"/>
    <!-- Automatically detect the version of the current RELEASE. -->
    <exec command="php ./buildenv/get_version.php -v RELEASE" checkreturn="true" outputProperty="version"/>

    <target name="all" depends="i18n"
        description="Main target -- Same as 'phing i18n'"/>

    <target name="locales" description="Displays available locales">
        <echo message="Available locales: '${locales}'"/>
    </target>

    <!-- Internationalization -->
    <target name="i18n"
        depends="extract_messages,update_catalog,compile_catalog"
        description="Runs several commands to update the translation files"/>

    <target name="extract_messages"
        description="Extract messages in need of a translation from current code">
        <php function="putenv">
            <param value="LANG=C"/>
        </php>
        <xgettext command="xgettext -o data/i18n/${phing.project.name}.pot --from-code utf-8 --foreign-user --add-location -E -i -w 80 -s -L PHP --strict --force-po --package-name ${phing.project.name} --package-version ${version} --msgid-bugs-address i18n@erebot.net --add-comments=I18N:">
            <fileset refid="sources"/>
        </xgettext>
        <if>
            <isset property="env.LANG"/>
            <then>
                <php function="putenv">
                    <param value="LANG=${env.LANG}"/>
                </php>
            </then>
        </if>
    </target>

    <target name="update_catalog"
        description="Update the translation files based on current code">
        <foreach list="${locales}" param="locale" target="update_1_catalog"/>
        <phing phingFile="build.xml" target="identity_catalog" haltonfailure="true"/>
    </target>

    <target name="update_1_catalog" hidden="true">
        <exec command="msgmerge --backup=off -U -N -e -i --strict -w 80 -F -q --add-location data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po data/i18n/${phing.project.name}.pot" logoutput="true" dir="."/>
    </target>

    <target name="identity_catalog"
        description="Automatically translate the catalog for the default locale">
        <property name="locale" value="en_US"/>
        <exec command="msgen -e -i --strict -w 80 -F --add-location -o data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po" logoutput="true" dir="."/>
    </target>

    <target name="init_catalog"
        description="Add a new language to translation files">
        <propertyprompt propertyName="locale" promptText="Name of the locale" useExistingValue="true"/>
        <mkdir dir="data/i18n/${locale}/LC_MESSAGES"/>
        <exec command="msginit --no-translator -w 80 -l ${locale} -i data/i18n/${phing.project.name}.pot -o data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po" logoutput="true" dir="."/>
    </target>

    <target name="compile_catalog"
        description="Compile the translation files">
        <php function="putenv">
            <param value="LANG=C"/>
        </php>
        <foreach list="${locales}" param="locale" target="compile_1_catalog"/>
        <if>
            <isset property="env.LANG"/>
            <then>
                <php function="putenv">
                    <param value="LANG=${env.LANG}"/>
                </php>
            </then>
        </if>
    </target>

    <target name="compile_1_catalog" hidden="true">
        <exec command="msgfmt --statistics -c -f -o data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.mo data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po" dir="." outputProperty="stats"/>
        <i18nStats output="${stats}" file="data/i18n/${locale}/LC_MESSAGES/${phing.project.name}.po"/>
    </target>

    <!-- Release process -->
    <target name="release" depends="all"
        description="Build a PEAR package from the current code">
        <propertyprompt useExistingValue="true" promptText="Stability" propertyName="stability" defaultValue="stable"/>
        <delete verbose="true">
            <fileset dir=".">
                <include name="package.xml"/>
                <include name="package_compatible.xml"/>
            </fileset>
        </delete>
        <mkdir dir="${release.tmp}"/>
        <exec
            command="pyrus.phar ${release.tmp} channel-discover ${pear.channel} ."
            passthru="true"
            checkreturn="true"
        />
        <exec
            command="pyrus.phar ${release.tmp} make ${phing.project.name} ${pear.channel} ."
            passthru="true"
            checkreturn="true"
        />
        <exec command="xmlstarlet ed -N pear=http://pear.php.net/dtd/package-2.1 -P -S -u &quot;/pear:package/pear:stability/pear:release&quot; -v ${stability} package.xml > ${file.tmp}"
            escape="false" checkreturn="true" logoutput="true"/>
        <move file="${file.tmp}" tofile="package.xml" haltonerror="true" overwrite="true"/>
        <exec
            command="pyrus.phar ${release.tmp} package --tgz"
            passthru="true"
            checkreturn="true"
        />
        <if>
            <istrue value="${build-phar}"/>
            <then>
                <exec
                    command="pyrus.phar ${release.tmp} package --phar"
                    passthru="true"
                    checkreturn="true"
                />
            </then>
        </if>
        <delete dir="${release.tmp}"/>
    </target>

    <target name="set_version">
        <propertyprompt propertyName="version" promptText="New version" useExistingValue="true"/>
        <phingcall target="protected_set_version">
            <property name="version" value="${version}"/>
        </phingcall>
    </target>

    <!-- Protected targets, meant to facilitate extensions. -->
    <target name="protected_set_version"></target>

    <!-- Documentation -->
    <target name="doc" depends="doc_html,doc_pdf"
        description="Generate API documentation in both HTML and PDF format"/>

    <target name="doc_html" description="Generate API documentation in HTML format">
        <!-- Get the brief description from the README. -->
        <if>
            <os family="windows"/>
            <then>
                <exec command="./buildenv/compat/win/head.bat README"
                    outputProperty="short_description"/>
            </then>
            <else>
                <exec command="head -1 README" outputProperty="short_description"/>
            </else>
        </if>
        <php function="escapeshellarg" returnProperty="short_description">
            <param value="${short_description}"/>
        </php>

        <!-- Determine path to tag files. -->
        <property name="tagfiles.reference" value="${phing.project.name}"/>
        <exec command="php ./buildenv/get_filetags.php ${tagfiles.reference} ${tagfiles}"
            checkreturn="true" outputProperty="tagfiles"/>
        <php function="escapeshellarg" returnProperty="tagfiles">
            <param value="${tagfiles}"/>
        </php>

        <exec command="COMPONENT_NAME=${phing.project.name} COMPONENT_VERSION=${version} COMPONENT_BRIEF=${short_description} COMPONENT_TAGFILES=${tagfiles} doxygen"
            dir="." passthru="true" checkreturn="true" logoutput="true"/>
    </target>

    <target name="doc_pdf" description="Generate API documentation in PDF format">
        <exec command="make" dir="docs/latex" passthru="true"/>
    </target>


    <!-- Unit tests and code coverage -->
    <target name="test" depends="qa_coverage"
        description="Run tests and generate code coverage reports (same as 'phing qa_coverage')" />
    <target name="tests" depends="qa_coverage"
        description="Same as 'phing test'"/>
    <target name="coverage" depends="qa_coverage"
        description="Same as 'phing test'"/>


    <!-- Quality Assurance -->
    <target name="qa"
        depends="qa_lint,qa_codesniffer,qa_depend,qa_mess,qa_duplicates,qa_test"
        description="Run Qualify-Assurance (QA) tools"/>

    <target name="qa_lint" description="Check QA using phplint">
        <phplint><fileset refid="sources"/></phplint>
    </target>

    <target name="qa_codesniffer" description="Check QA using PHP_CodeSniffer">
        <php expression="@include_once('PHP/CodeSniffer/CLI.php');"/>
        <php function="class_exists" returnProperty="usable">
            <param value="PHP_CodeSniffer_CLI"/>
        </php>
        <if>
            <istrue value="${usable}"/>
            <then><import file="buildenv/phing/phpcs.xml"/></then>
            <else>
                <echo>
                    pear.php.net/PHP_CodeSniffer >= 1.2.2 must be installed
                    for the "qa_codesniffer" target to be available.
                </echo>
            </else>
        </if>
    </target>

    <target name="qa_depend"
        description="Check QA using PHP depend">
        <php expression="@include_once('PHP/Depend/TextUI/Runner.php');"/>
        <php function="class_exists" returnProperty="usable">
            <param value="PHP_Depend_TextUI_Runner"/>
        </php>
        <if>
            <istrue value="${usable}"/>
            <then><import file="buildenv/phing/pdepend.xml"/></then>
            <else>
                <echo>
                    pear.pdepend.org/PHP_Depend must be installed
                    for the "qa_depend" target to be available.
                </echo>
            </else>
        </if>
    </target>

    <target name="qa_mess"
        description="Check QA using phpmd (PHP Mess Detector)">
        <php expression="@include_once('PHP/PMD.php');"/>
        <php function="class_exists" returnProperty="usable">
            <param value="PHP_PMD"/>
        </php>
        <if>
            <istrue value="${usable}"/>
            <then><import file="buildenv/phing/phpmd.xml"/></then>
            <else>
                <echo>
                    pear.phpmd.org/PHP_PMD must be installed
                    for the "qa_mess" target to be available.
                </echo>
            </else>
        </if>
    </target>

    <target name="qa_duplicates"
        description="Check QA using phpcpd (PHP Copy/Paste Detector)">
        <php expression="@include_once('PHPCPD/TextUI/Command.php');"/>
        <php function="class_exists" returnProperty="usable">
            <param value="PHPCPD_TextUI_Command"/>
        </php>
        <if>
            <istrue value="${usable}"/>
            <then><import file="buildenv/phing/phpcpd.xml"/></then>
            <else>
                <echo>
                    pear.phpunit.de/phpcpd must be installed
                    for the "qa_duplicates" target to be available.
                </echo>
            </else>
        </if>
    </target>

    <target name="qa_pre_coverage" hidden="true">
        <php expression="@include_once('PHPUnit/Autoload.php');"/>
        <php expression="@include_once('PHPUnit/Runner/Version.php');"/>
        <php function="class_exists" returnProperty="usable">
            <param value="PHPUnit_Runner_Version"/>
        </php>
        <if>
            <istrue value="${usable}"/>
            <then><import file="buildenv/phing/pre_coverage.xml"/></then>
            <else>
                <echo>
                    pear.phpunit.de/PHPUnit must be installed
                    for the "qa_pre_coverage" target to be available.
                </echo>
            </else>
        </if>
    </target>

    <target name="qa_test" depends="qa_pre_coverage"
        description="Run (unit) tests using PHPUnit">
        <php expression="define('TESTENV_DIR', dirname('${phing.file}').DIRECTORY_SEPARATOR.'tests'.DIRECTORY_SEPARATOR.'testenv');"/>
        <php expression="@include_once('PHPUnit/Autoload.php');"/>
        <php expression="@include_once('PHPUnit/Runner/Version.php');"/>
        <php function="class_exists" returnProperty="usable">
            <param value="PHPUnit_Runner_Version"/>
        </php>
        <if>
            <istrue value="${usable}"/>
            <then><import file="buildenv/phing/phpunit.xml"/></then>
            <else>
                <echo>
                    pear.phpunit.de/PHPUnit must be installed
                    for the "qa_test" target to be available.
                </echo>
            </else>
        </if>
    </target>

    <target name="qa_coverage" depends="qa_test"
        description="Run code coverage analysis based on unit tests (see 'phing qa_test')">
        <php expression="@include_once('PHPUnit/Autoload.php');"/>
        <php expression="@include_once('PHPUnit/Runner/Version.php');"/>
        <php function="class_exists" returnProperty="usable">
            <param value="PHPUnit_Runner_Version"/>
        </php>
        <if>
            <istrue value="${usable}"/>
            <then><import file="buildenv/phing/coverage.xml"/></then>
            <else>
                <echo>
                    pear.phpunit.de/PHPUnit must be installed
                    for the "qa_coverage" target to be available.
                </echo>
            </else>
        </if>
    </target>
</project>
