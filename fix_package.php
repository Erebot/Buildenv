#!/usr/bin/env php
<?php
/**
 * Processes a package.xml file as generated by this command:
 * "pyrus.phar make ...".
 * This script then creates a PEAR-compatible package.xml (2.0) file.
 * This is intended to work around both an issue in Pyrus
 * (see https://github.com/pyrus/Pyrus/issues/26) and the fact
 * that Pyrus generates package.xml (1.0) compatibility files
 * by default (which are now considered obsolete).
 */

function main()
{
    $ns = 'http://pear.php.net/dtd/package-2.0';
    $affectedRoles = array('doc', 'test', 'data');

    $xml = new DOMDocument();
    $origDoc = file_get_contents('php://stdin');
    $xml->loadXML(
        str_replace('http://pear.php.net/dtd/package-2.1', $ns, $origDoc),
        LIBXML_NONET | LIBXML_COMPACT
    );
    $xpath = new DOMXPath($xml);
    $xpath->registerNamespace('pkg', $ns);

    $xpath->query('/pkg:package[1]')->item(0)->setAttribute('version', '2.0');

    $channel = $xpath->evaluate('string(/pkg:package/pkg:channel[1])');
    $pkgName = $xpath->evaluate('string(/pkg:package/pkg:name[1])');

    $root = $xpath->query('//pkg:contents[1]/pkg:dir[1]');
    $root = $root->item(0);

    $phprelease = $xpath->query('//pkg:phprelease[1]');
    $phprelease = $phprelease->item(0);
    $filelist = $xml->createElementNS($ns, 'filelist');
    $phprelease->appendChild($xml->createTextNode("\n    "));
    $phprelease->appendChild($filelist);
    $phprelease->appendChild($xml->createTextNode("\n  "));

    foreach ($xpath->query('//pkg:contents[1]//pkg:dir/pkg:file') as $node) {
        $root->appendChild($xml->createTextNode("\n      "));
        $path = $node->getAttribute('name');
        for ($parent = $node->parentNode;
             $parent->localName == 'dir' &&
             $parent->getAttribute('name') != '/';
             $parent = $parent->parentNode) {
             $path = $parent->getAttribute('name') . '/' . $path;
        }
        $md5 = md5_file($path);
        $path = explode('/', $path);

        // Remove leading dir (role in local layout).
        array_shift($path);
        $origPath = implode('/', $path);
        // Push channel & package name where necessary.
        if (in_array($node->getAttribute('role'), $affectedRoles)) {
             array_unshift($path, $channel, $pkgName);
        }
        // Replace empty string with role.
        array_unshift($path, $node->getAttribute('role'));

        $path = implode('/', $path);
        $node->setAttribute('name', $path);
        $node->setAttribute('md5sum', $md5);
        $node->parentNode->removeChild($node);
        $root->appendChild($node);

        $file = $xml->createElementNS($ns, 'install');
        $file->setAttribute('name', $path);
        $file->setAttribute('as', $origPath);
        $filelist->appendChild($xml->createTextNode("\n      "));
        $filelist->appendChild($file);
    }
    $filelist->appendChild($xml->createTextNode("\n    "));
    $root->appendChild($xml->createTextNode("\n    "));

    foreach ($xpath->query('//pkg:contents[1]/pkg:dir/pkg:dir') as $node) {
         $node->parentNode->removeChild($node);
    }

    while ($root->firstChild->nodeType == XML_TEXT_NODE) {
         $root->removeChild($root->firstChild);
    }
    $root->insertBefore($xml->createTextNode("\n      "), $root->firstChild);
    echo $xml->saveXML();
}

main();
